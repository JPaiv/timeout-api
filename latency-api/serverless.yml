service: latency-api

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

  stage: dev
  region: eu-west-1

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: arn:aws:dynamodb:*:*:table/${self:custom.latencyTable}
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:*:*:function:*
  # - Effect: Allow
  #   Action:
  #     - S3: GetItem
  #   Resource: arn:aws:s3:::bucket/${self:custom.latencyBucket}
  # - Effect: Allow
  #   Action:
  #     - S3: GetItem
  #   Resource: arn:aws:s3:::bucket/${self:custom.latencyBucket}/*

custom:
  region: ${self:provider.region}
  prefix: ${self:provider.stage}-${self:service}
  latencyTable: ${self:custom.prefix}-transaction-latencies-table
  latencyBucket:  ${self:custom.prefix}-transaction-latencies-sources

functions:
  create-latency-table:
    description: FIll dynamo table wityh latency information.
    handler: create-latency-table.handler
    events:
     - s3: ${self:custom.latencyBucket}
    environment:
      latencyTable: ${self:custom.latencyTable}

resources:
 Resources:
    Verification:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.latencyTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
