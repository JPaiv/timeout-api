service: latency-api

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:*:*:table/${self:custom.latencyTable}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:*:*:function:*
    - Effect: Allow
      Action:
        - s3:GetItem
        - s3:PutItem
        - s3:GetObject
        - s3:PutObject
        - s3:ListObject
        - s3:Get*
        - s3:Put*
      Resource: 
        - arn:aws:s3:::${self:custom.latencyBucket}
        - arn:aws:s3:::${self:custom.verificationBucket}
    - Effect: Allow
      Action:
        - s3:GetItem
        - s3:PutItem
        - s3:GetObject
        - s3:PutObject
        - s3:ListObject
        - s3:Get*
        - s3:Put*
      Resource: 
        - arn:aws:s3:::${self:custom.latencyBucket}/*
        - arn:aws:s3:::${self:custom.verificationBucket}/*
    - Effect: Allow
      Action:
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
      Resource: arn:aws:sqs:*:*:${self:custom.timeoutTransactions}

custom:
  region: ${self:provider.region}
  prefix: ${self:provider.stage}-${self:service}
  latencyTable: ${self:custom.prefix}-transaction-latencies-table
  latencyBucket:  ${self:custom.prefix}-transaction-latencies-sources
  verificationBucket:  ${self:custom.prefix}-transaction-verification-sources
  timeoutTransactions: ${self:custom.prefix}-timeout-transactions

functions:
  create-latency-table:
    description: Fill dynamo table with latency information.
    handler: create-latency-table.handler
    events:
     - s3: ${self:custom.latencyBucket}
    environment:
      latencyTable: ${self:custom.latencyTable}

  latency-api:
    description: Check if transaction is valid
    handler: latency-api.handler
    events:
      - httpApi:
          path: /verifyTransaction
          method: get
    environment:
      latencyTable: ${self:custom.latencyTable}

  verification-api:
    description: Check if transaction is valid
    handler: latency-api.handler
    events:
     - s3: ${self:custom.latencyBucket}
    environment:
      latencyTable: ${self:custom.verificationBucket}

resources:
 Resources:
    Verification:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.latencyTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    Transactions:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.timeoutTransactions}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - MessagesDeadLetterQueue
            - Arn
          maxReceiveCount: 10

    MessagesDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.timeoutTransactions}-dead-letter-queue
        MessageRetentionPeriod: 1209600
