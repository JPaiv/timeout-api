service: timeout-api

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221

  stage: dev
  region: eu-west-1

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: arn:aws:dynamodb:*:*:table/${self:custom.latencyTable}
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:*:*:function:*
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.timeoutTransactions}

package:
  patterns:
    - '!./**'
    - ./bin/**

custom:
  region: ${self:provider.region}
  prefix: ${self:provider.stage}-${self:service}
  latencyTable: ${self:custom.prefix}-transaction-latencies-table
  timeoutTransactions: ${self:custom.prefix}-timeout-transactions

functions:
  transaction-api:
    handler: bin/verification-api
    description: Verify transactions from API and DynamoDb object query.
    events:
      - httpApi:
          path: /verifyTransaction
          method: get
    environment:
      latencyTable: ${self:custom.latencyTable}

resources:
  Resources:
    Transactions:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.timeoutTransactions}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - MessagesDeadLetterQueue
            - Arn
          maxReceiveCount: 10

    MessagesDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.timeoutTransactions}-dead-letter-queue
        MessageRetentionPeriod: 1209600
